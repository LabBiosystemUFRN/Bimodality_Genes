valHist$counts<- tmp$counts.y+tmp$counts.x
}
#integra os demais dados
dt <- data.frame(x = mCluster$data)
#calcula histograma
histograma <- hist(dt$x, breaks = breaks ,plot = F)
tmp<-data.frame(x=histograma$breaks[1:length(histograma$breaks)-1],
dens=histograma$density,
counts=histograma$counts,
#                        cor=cores[i],
cor=qtdPicos+1,
stringsAsFactors = F)
#copia dados ainda não computados
valHist$dens[valHist$cor == qtdPicos+1]<- tmp$dens[valHist$cor == qtdPicos+1]
valHist$counts[valHist$cor == qtdPicos+1]<- tmp$counts[valHist$cor == qtdPicos+1]
#Normaliza os valores de expressão apenas para fins do gráfico
amostras$norm <- normaliza(amostras$V3)
if(percent == 0){
xtext<-"Expression Values - all values"
}else{
xtext<-paste0("Expression Values - over ", percent,"% of maximum expression")
}
xtext<-"Expression Values"
library(ggplot2)
subG<-list()
g<-ggplot()+
ggtitle(paste(tipo," ",nomeGene," Threshold Y = ",limiarUp," Threshold X = ",percent))
i=2
for(i in 1:qtdPicos){
if(nrow(valHist[valHist$cor == i,])==0){
result<-0
return(result)
}
media <- mdsd$mean[i]
sd <- mdsd$sd[i]
x=c(media-sd,media+sd,media+sd,media-sd)
y=c(max(densidade$yDens),max(densidade$yDens),min(densidade$yDens),min(densidade$yDens))
area<-data.frame(x=x,y=y)
area$x[area$x<0]=0
g<-g+geom_polygon(data = area, aes(x,y),col='Gray91', fill='Gray91')
g<-g+geom_vline(xintercept = media,lty = 2, col="Gray51")
g<-g+geom_point(data= valHist[valHist$cor == i,], aes(x,counts*max(densidade$yDens)/ max(valHist$counts),shape="ponto"),col=i+1)
#separa as amostras resultado
result[[i]] <- data.frame(sample=amostras$V1[mCluster$classification == i & mCluster$uncertainty < 0.45],
expression=amostras$V3[mCluster$classification == i & mCluster$uncertainty < 0.45],
stringsAsFactors = F)
subG[[i]]<-ggplot()+
theme_bw()+
xlab(paste0(xtext, " - Group ",i," (bin = ", hist2[[i]][2,1]-hist2[[i]][1,1],")"))+
ylab("Density") +
#xlim(c(0,max(densidade$xDens)))+
scale_y_continuous(name = "Counts")+
geom_col(data= hist2[[i]], aes(x,y),col="gray", fill=i+1)
}
if(nrow(valHist[valHist$cor == qtdPicos+1 & valHist$counts > 1 ,])>0){
g<-g+geom_point(data= valHist[valHist$cor == qtdPicos+1 &
valHist$counts > 1 ,],
aes(x,counts*max(densidade$yDens)/ max(valHist$counts),
shape="ponto"),
col = 4)
}
if(nrow(valHist[valHist$cor == qtdPicos+1 & valHist$counts == 1 ,])>0){
g<-g+geom_point(data= valHist[valHist$cor == qtdPicos+1 &
valHist$counts == 1 ,],
aes(x,counts*max(densidade$yDens)/ max(valHist$counts),
shape="ponto"),
col = 4,
alpha=1/2)
}
g<-g+
theme_bw()+
xlab(xtext)+
ylab("Density") +
scale_y_continuous(name = expression("Density"),
#limits = c(0, max(densidade$yDens)),
sec.axis = sec_axis(~ ./max(densidade$yDens)* max(histograma$counts) ,
name = "Counts"))+
geom_line(data=densidade, aes(xDens,yDens,linetype="before"),col="blue")
g<-g+scale_shape_manual("",guide = F,values = c("ponto"=21,"none"=NA))+
scale_linetype_manual("Density",guide = F,values = c("before"=1,"after"=2),
labels = c("Before","After"))
result[[qtdPicos+1]] <- data.frame(sample=amostras$V1[mCluster$classification == qtdPicos+1 |
(mCluster$classification != qtdPicos+1 & mCluster$uncertainty >= 0.45)],
expression=amostras$V3[mCluster$classification == qtdPicos+1 |
(mCluster$classification != qtdPicos+1 & mCluster$uncertainty >= 0.45)],
stringsAsFactors = F)
return(list(result,g,subG,max(densidade$yDens)))
}
printGraf<-function(dirFig,
g,
subG,
gene,
percent){
if (!require("gridExtra")) {
install.packages("gridExtra")
}
if (!require("grid")) {
install.packages("grid")
}
#cria o grid do gráfico
layout<-rbind(c(1,1),
c(2,3))
#pdf(file="BarraKSTs.pdf",width = 11, height = 8)
g1<-grid.arrange(g,subG[[1]],subG[[2]],
layout_matrix=layout)
#dev.off()
#grava valores do histograma - Sandro
#removi pq só cria confusão
# S <- valHist[,c(1,3)]
# colnames(S)<-c("Expression","Counts")
# write.table(S,file = paste0(dirFig,tipo,"_",nomeGene,".csv"),sep = "\t",row.names = F,col.names = T)
ggsave(filename = paste0(dirFig,"/",gene,"_",percent,".pdf"),
plot = g1,
device = "pdf",
width = 11,height = 8)
}
printGraf2<-function(dirFig,
g,
gSV,
gene,
percent){
if (!require("gridExtra")) {
install.packages("gridExtra")
}
if (!require("grid")) {
install.packages("grid")
}
#cria o grid do gráfico
layout<-rbind(c(1,1),
c(1,1),
c(1,1),
c(1,1),
c(1,1),
c(1,1),
c(1,1),
c(1,1),
c(2,2))
#pdf(file="BarraKSTs.pdf",width = 11, height = 8)
g1<-grid.arrange(g,gSV,
layout_matrix=layout)
#dev.off()
#grava valores do histograma - Sandro
#removi pq só cria confusão
# S <- valHist[,c(1,3)]
# colnames(S)<-c("Expression","Counts")
# write.table(S,file = paste0(dirFig,tipo,"_",nomeGene,".csv"),sep = "\t",row.names = F,col.names = T)
ggsave(filename = paste0(dirFig,"/",gene,"_",percent,".pdf"),
plot = g1,
device = "pdf",
width = 11,height = 8)
}
processaPicos<- function(amostras = amostras,
arqLog = arqLog,
gene){
#calcula densidade ----
g <- density(amostras$V3)
#g <- density(amostras$V3,bw="SJ") #outro tipo de cálculo de densidade
densidade<-data.frame(cbind(g$x,g$y))
colnames(densidade) <- c("xDens","yDens")
#Valores maximos e mínimos de expressão
medExpe <- mean(amostras$V3)
sdExpe <- sd(amostras$V3)
maxExpr <- max(amostras$V3)
minExpr <- min(amostras$V3)
#Normaliza x da densidade entre 0 e 1
densidade$xNorm<- (densidade$xDens)/(max(densidade$xDens))
maxExprN<-(maxExpr)/(max(densidade$xDens))
minExprN<-(minExpr)/(max(densidade$xDens))
medDens <- (medExpe-min(densidade$xDens))/(max(densidade$xDens)-min(densidade$xDens))
sdDens <- (sdExpe-min(densidade$xDens))/(max(densidade$xDens)-min(densidade$xDens))
#normaliza y
M<-max(densidade$yDens)
m<-min(densidade$yDens)
densidade$yDNorm<-sapply(densidade$yDens,function(x){
tmp<-c((x-m)/(M-m))
})
#Calcula derivadas
derivadaV <- fderivada(densidade[c("xNorm","yDNorm")])
#atenuacao <- 0.65
#filtro passa baixa
derivadaS<-smooth.spline(derivadaV, spar = atenuacao, df = 5)
derivadaS<- data.frame(cbind(derivadaS$x,derivadaS$y))
colnames(derivadaS)<- c("x","y")
#sem filtro
derivadaS<-derivadaV
#Normaliza derivadas
M<-max(derivadaS$y)
m<-min(derivadaS$y)
derivadaS$y<-sapply(derivadaS$y,function(x){
tmp<-c((x)/(M))
})
M<-max(derivadaV$y)
derivadaV$y<-sapply(derivadaV$y,function(x){
tmp<-c((x)/(M))
})
picos<-achaPico(derivadaS)
valPicos<-aplicaTH(densidade=densidade[c("xNorm","yDNorm")],
picos=picos, limiarUp = limiarUp,
limiarDw = limiarDw, arqLog = arqLog,gene = gene )
d<-densidade
densidade$picos <- merge(densidade[c("xNorm")], valPicos, by = 1, all.x = T)[,3]
qtdPicos <-nrow(valPicos[valPicos$tipo==1,])
return(list(densidade,
qtdPicos,
maxExpr,
minExpr,
medExpe,
sdExpe ))
}
#processa inicio ----
processa = function(dirBase,
dirFig,
atenuacao,
percent,
tipo,
fileName){
#Create folder for figures
dirFigFake<-paste0(dirFig,"fake/")
if (!dir.exists(dirFig)){
dir.create(dirFig)
dir.create(dirFigFake)
}
#Create folder for samples
dirSamples<-paste0(dirBase,"/samples/",tipo,"/")
dirSamplesFake<-paste0(dirSamples,"fake/")
if (!dir.exists(dirSamples)){
dir.create(dirSamples)
dir.create(dirSamplesFake)
}
#realiza o processamento propriamente dito
#abre arquivo para escrita
arqLog<-paste0(dirBase,
"log/",
tipo,
format(Sys.time(), "%X_%Y_%m_%d"),
"log.txt")
cont=0
lista <- data.frame(matrix(ncol = 2, nrow = 0))
erros <- data.frame(matrix(ncol = 1, nrow = 0))
dfTmp <- data.frame(matrix(ncol = 2, nrow = 0))
dirDados<-paste0(dirBase,"data/")
#vai para de dados e lê arquivos
setwd(dirDados)
cat("Lendo arquivo",fileName,"\n")
tryCatch(allAmostras<-read.table(paste0(dirDados,
fileName),
sep = "\t",
header = F,
stringsAsFactors = F),
error = function(e) {print(paste("Erro no arquivo ",fileName))
writeLines(paste("Erro abrindo o arquivo ",fileName))
cat(paste("Erro abrindo o arquivo ",fileName,"\n"),file=arqLog, append = T)
return(1)})
cat("Filtrando arquivo",fileName,"\n")
#somente para gerar um aqeuivo menor com genes pseudo bimodais
# genes<-c("ALDH7A1","CDCA5","DMRTA1","ECHDC3","FOXD1","IRF6","PLK1","TRIM29")
# allAmostras<-allAmostras[allAmostras$V3 %in% genes,]
# write.table(allAmostras,
#             paste0(dirDados,
#                   "LUSCBimodal.tsv"),
#            sep = "\t",
#            row.names = F,
#            col.names = F)
allAmostras<-allAmostras[!allAmostras$V3 == '-',c(1,3,4)]
genes <- unique(allAmostras$V3)
genes<-genes[order(genes)]
#genes<-genes[which(genes=="TLR1"):length(genes)]#comentar depois
#genes="FOXA1"
genes<-c("ALDH7A1","CDCA5","DMRTA1","ECHDC3","FOXD1","IRF6","PLK1","TRIM29")
gene<-c("ALDH7A1")
for(gene in genes){
#le amostras ----
amostras <- na.omit(allAmostras[allAmostras$V3 == gene,])
colnames(amostras)<-c("V1","V2","V3")
if(nrow(amostras) == 0){
writeLines(paste("Erro processando ",gene,": nenhum valor de expressão encontrado."))
cat(paste("Erro processando",gene,": nenhum valor de expressão encontrado.","\n"),file=arqLog,append = T)
next()}
#nome do gene ----
#genes com alias tem nomes separados por "//" e devem ser eleiminados
if(grepl("/",gene)){
gene<-strsplit(gene,"/")[[1]][1]
}
writeLines(paste("Processando ", gene))
cat(paste("Processando ", gene,"\n"),file=arqLog,append = T)
# print(nrow(amostras))
#realiza o corte de tudo que ficar abaixo do percentual da expressão máxima informado
if(percent != 0){
#amostras<-amostras[amostras$V3>=maxExpr*percent/100,]
amAbaixo<-amostras[amostras$V3<percent,] #usa valor fixo
amostras<-amostras[amostras$V3>=percent,] #usa valor fixo
}
if(nrow(amostras)<50){
writeLines(paste("Dados insuficienes para processamento - ", nrow(amostras), " amostras em ", gene))
cat(paste("Dados insuficienes para processamento - ", nrow(amostras), " amostras em ", gene,"\n"),file=arqLog,append = T)
next()
}
pPicos<-processaPicos(amostras,arqLog,gene)
densidade<-pPicos[[1]]
qtdPicos<-pPicos[[2]]
maxExpr<-pPicos[[3]]
minExpr<-pPicos[[4]]
medExpe<-pPicos[[5]]
sdExpe<-pPicos[[6]]
nomeGene = gene
if(qtdPicos >= 2){
# resultado relevante ----
resultado <- intervalo(densidade = densidade,
amostras = amostras,
maxExpr = maxExpr,
minExpr = minExpr,
nomeGene = gene,
dirFig = dirFig,
percent = percent,
atenuacao = atenuacao,
tipo = tipo,
qtdPicos = qtdPicos)
if(class(resultado) == "numeric"){
writeLines(paste("Erro processando ",gene,": GMM não acusou dois picos."))
cat(paste("Erro processando",gene,": GMM não acusou dois picos.","\n"),file=arqLog,append = T)
next()}
#extrai conteudo do retorno da funcao
g<-resultado[[2]]
subG<-resultado[[3]]
maxYDens<-resultado[[4]]
resultado<-resultado[[1]]
#cria barra de sobrvida ----
sobrevida<-read.table(paste0(dirDados,
gene,".sv"),
sep = "\t",
header = T,
stringsAsFactors = F)
colnames(sobrevida)<-c("V10","V5","V6","V7","V8","V9")
sobrevida$V10<-NULL
amostras$V4<-substr(amostras$V1,1,12)
amostras<-merge(amostras,sobrevida,
by.x = "V4",
by.y = "V5")
#      amostras$V1<-NULL
amostras$V6<-NULL
#colnames(amostras)<-c("id","gene","exp","age","months","live")
qtdBins=5
points<-quantile(amostras$V3,probs = seq(0,1,1/qtdBins))
dados<-data.frame(exp=numeric(),
month=numeric(),
width=numeric())
i=5
for( i in 1:(length(points)-1)){
ini<-points[[i]]
fim<-points[[i+1]]
exp<-ini+(fim-ini)/2
width<-(fim-ini)
month<-mean(na.exclude(amostras$V8[ini<amostras$V3
& amostras$V3<=fim]))
dados[nrow(dados)+1,]<- c(exp,month,width)
}
gSV<-ggplot(dados)+theme_bw()+
theme(title = element_text(size = 6),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_text(size = ),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank())+
geom_tile(aes(x = exp, y=0,
fill=month,
width=width,height=1))
#confere se há mesmo dois picos
P1e2<-c(resultado[[1]]$sample,
resultado[[2]]$sample)
#filtra amostras dos picos
amostrasPicos<-amostras[amostras$V1 %in% P1e2,]
#teste picos novamente
pPicos2<-processaPicos(amostrasPicos,arqLog,gene)
densidade2<-pPicos2[[1]]
qtdPicos2<-pPicos2[[2]]
#adiciona linha dos picos sem amostras escluidas pela GMM
maxD2<-maxYDens/max(densidade2$yDens)
# g<-g+geom_line(data=densidade2,
#                aes(xDens,yDens*maxD2,linetype="after"),
#                col="orange")
if(qtdPicos==qtdPicos2){
dirFigDest<-dirFig
dirSamplesDest<-dirSamples
}else{
dirFigDest<-dirFigFake
dirSamplesDest<-dirSamplesFake
}
printGraf2(dirFig = dirFigDest,
g = g,
gSV = gSV,
gene = gene,
percent = percent)
#salva identificador das amostras
for(i in 1:length(resultado)){
write.table(as.character(resultado[[i]]$sample),
paste0(dirSamplesDest,"/",gene,"_",percent,"_",i,".lst"),
row.names = F,
col.names = F)
#totaliza as contagens
}
sumario<-data.frame(th=nrow(amAbaixo),
low=nrow(resultado[[3]][resultado[[3]]$expression<min(resultado[[1]]$expression),]),
p1=nrow(resultado[[1]]),
btw=nrow(resultado[[3]][(resultado[[3]]$expression>max(resultado[[1]]$expression)&
resultado[[3]]$expression<min(resultado[[2]]$expression)),]),
p2=nrow(resultado[[2]]),
high=nrow(resultado[[3]][resultado[[3]]$expression>max(resultado[[2]]$expression),]))
sumario$tot<-sum(sumario)
write.table(sumario,paste0(dirSamplesDest,"/",gene,"_",percent,".summary"),
row.names = F,
col.names = T,
sep = "\t" )
cont <- cont+1
dfTmp[1,1]<-cont
dfTmp[1,2]<-as.character(gene)
lista <- rbind(lista,dfTmp)
cat(c("*******************************************************\n",
paste("Bimodalidade em ", gene,"\n"),
"*******************************************************\n"),
file = arqLog, append = T)
writeLines(c("*******************************************************",
paste("Bimodalidade em ", gene),
"*******************************************************"))
# print("*******************************************************")
# print(paste("Bimodalidade em ", gene[1,1]))
# print("*******************************************************")
# dev.off()
}
}
#dev.off()
colnames(lista)<-c("Nr","Gene")
colnames(erros)<-c("Arquivo")
#write.csv(lista,paste0(dirFig,"lista.csv"),row.names = F)
#write.csv(erros,paste0(dirFig,"erros.csv"),row.names = F)
#close(arqLog)
}
#*************************************************
#main ----
#*************************************************
#define variáveis de threshold
#Diferença mínima entre picos e vales
limiarUp = 0.05
limiarDw = 0.1
atenuacao = 0.05
dirBase<-"/home/clovis/Doutorado/MaterialDiverso/Josivan/New/"
dirFig<-"/home/clovis/Doutorado/MaterialDiverso/Josivan/New/figures/"
vtipo<-c("LUSC")
vfileName<-c("LUSCBimodal.tsv")
# i=1
# for(i in seq(1,1,1)){
# dirBase<-"/home/clovis/Doutorado/Projetos/Bimodalidade/"
# dirFig<-"/home/clovis/Doutorado/Projetos/Bimodalidade/figures/"
#
# vtipo<-c("BRCA",
#          "BLCA",
#          "COAD",
#          "KIRP",
#          "LUAD",
#          "PRAD",
#          "THCA",
#          "HNSC",
#          "LIHC",
#          "LUSC",
#          "SKCM",
#          "UCEC",
#          "CESC",
#          "KIRC",
#          "OV",
#          "STAD")
#
# vfileName<-c("BRCA_FPKM.tsv",
#              "BLCA_FPKM.tsv",
#              "COAD_FPKM.tsv",
#              "KIRP_FPKM.tsv",
#              "LUAD_FPKM.tsv",
#              "PRAD_FPKM.tsv",
#              "THCA_FPKM.tsv",
#              "HNSC_FPKM.tsv",
#              "LIHC_FPKM.tsv",
#              "LUSC_FPKM.tsv",
#              "SKCM_FPKM.tsv",
#              "UCEC_FPKM.tsv",
#              "CESC_FPKM.tsv",
#              "KIRC_FPKM.tsv",
#              "OV_FPKM.tsv",
#              "STAD_FPKM.tsv")
for(i in 1:length(vfileName)){
tipo<-vtipo[i]
fileName<-vfileName[i]
#tipo<-"FOXA1"
fileName<-"LUSCBimodal.tsv"
cat("Processando",tipo,fileName,"\n")
dirFigAtu = paste0(dirFig,tipo,"/")
processa(dirBase = dirBase,
dirFig = dirFigAtu,
atenuacao = atenuacao,
percent = 0.02,
tipo = tipo,
fileName=fileName)
}
debug=F
if(debug){
percent = 0.02
dirFig = dirFigAtu
}
